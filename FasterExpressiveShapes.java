package yt.fasterexpressiveshapes.faster;

import android.animation.ValueAnimator;
import android.animation.TimeInterpolator;
import android.animation.AnimatorListenerAdapter;
import android.content.Context;
import android.graphics.Canvas;
import android.graphics.Matrix;
import android.graphics.Paint;
import android.graphics.Path;
import android.graphics.RectF;
import android.util.AttributeSet;
import android.util.TypedValue;
import android.view.animation.LinearInterpolator;
import android.widget.FrameLayout;

import androidx.annotation.Nullable;
import androidx.core.graphics.PathParser;

import com.google.android.material.R;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import android.animation.ArgbEvaluator;

public class FasterExpressiveShapes extends FrameLayout {
	
	private static final Map<String, String> SHAPES = new HashMap<>();
	static {
		SHAPES.put("arch", "M304,253.72C304,259.83 304,262.89 303.69,265.46C301.31,285.51 285.51,301.31 265.46,303.69C262.89,304 259.83,304 253.72,304H50.28C44.17,304 41.11,304 38.54,303.69C18.5,301.31 2.69,285.51 0.3,265.46C-0,262.89 0,259.83 0,253.72V152C0,68.05 68.05,0 152,0C235.95,0 304,68.05 304,152V253.72Z");
		SHAPES.put("arrow", "M271.57,122.2C257.55,100.62 243.54,79.01 229.52,57.43C220.42,43.42 211.17,29.22 198.87,18.09C186.58,6.94 170.65,-0.94 154.32,0.09C139.98,1.01 126.68,8.72 116.19,18.79C105.7,28.86 97.55,41.26 89.53,53.54C67.84,86.72 46.13,119.9 24.44,153.1C14.14,168.86 3.56,185.31 0.71,204.09C-2.73,226.78 6.55,249.89 23.02,264.98C40.24,280.76 68.14,279.48 89.1,275.16C112.07,270.41 134.54,261.48 157.98,261.51C178.05,261.51 197.45,268.11 216.98,272.91C236.49,277.68 257.45,280.62 276.28,273.52C299.66,264.73 316.45,239.73 315.99,214.07C315.56,190.66 302.46,169.75 289.84,150.27C283.76,140.92 277.68,131.55 271.6,122.2H271.57Z");
		SHAPES.put("boom", "M156.82,10.16C157.57,4.14 157.95,1.13 158.52,0.59C159.35,-0.2 160.65,-0.2 161.48,0.59C162.05,1.13 162.43,4.14 163.18,10.16L172.76,86.74C173.06,89.17 173.22,90.38 173.65,90.89C174.29,91.61 175.32,91.84 176.19,91.43C176.79,91.15 177.43,90.1 178.69,88L218.41,21.96C221.54,16.77 223.1,14.17 223.84,13.91C224.92,13.54 226.1,14.07 226.55,15.13C226.85,15.85 225.98,18.76 224.23,24.57L202,98.44C201.29,100.79 200.94,101.96 201.14,102.59C201.42,103.52 202.28,104.14 203.24,104.13C203.9,104.12 204.9,103.42 206.9,102.02L269.91,57.94C274.87,54.47 277.34,52.74 278.13,52.8C279.26,52.9 280.13,53.87 280.11,55.01C280.09,55.8 278.12,58.1 274.17,62.69L223.98,121.09C222.38,122.94 221.59,123.87 221.51,124.53C221.39,125.49 221.92,126.41 222.81,126.79C223.42,127.06 224.61,126.82 227.01,126.36L302.4,111.86C308.33,110.72 311.3,110.15 311.98,110.53C312.98,111.08 313.38,112.32 312.9,113.36C312.57,114.07 309.83,115.36 304.37,117.94L234.89,150.77C232.69,151.81 231.58,152.33 231.24,152.9C230.75,153.73 230.86,154.79 231.52,155.5C231.97,155.99 233.15,156.27 235.52,156.82L310.27,174.41C316.15,175.79 319.09,176.48 319.56,177.11C320.25,178.02 320.11,179.32 319.25,180.07C318.66,180.58 315.64,180.65 309.61,180.77L232.86,182.34C230.42,182.39 229.2,182.42 228.66,182.8C227.88,183.36 227.55,184.37 227.86,185.29C228.07,185.92 229.04,186.66 230.99,188.14L292.16,234.76C296.97,238.43 299.37,240.27 299.55,241.03C299.81,242.15 299.16,243.28 298.07,243.61C297.32,243.84 294.54,242.66 288.98,240.31L218.23,210.36C215.98,209.41 214.86,208.93 214.21,209.06C213.26,209.25 212.55,210.04 212.47,211C212.41,211.66 213,212.74 214.17,214.88L251.19,282.5C254.1,287.81 255.56,290.47 255.41,291.25C255.19,292.37 254.15,293.14 253.02,293C252.24,292.9 250.17,290.69 246.04,286.26L193.53,229.96C191.86,228.18 191.02,227.28 190.38,227.14C189.44,226.92 188.48,227.35 188.01,228.2C187.68,228.78 187.79,230 187.99,232.44L194.46,309.35C194.97,315.4 195.22,318.42 194.77,319.07C194.12,320.01 192.85,320.28 191.88,319.69C191.21,319.28 190.21,316.41 188.23,310.68L163.03,237.78C162.23,235.46 161.83,234.31 161.3,233.91C160.53,233.33 159.47,233.33 158.7,233.91C158.17,234.31 157.77,235.46 156.97,237.78L131.77,310.68C129.79,316.41 128.79,319.28 128.12,319.69C127.15,320.28 125.88,320.01 125.23,319.07C124.78,318.42 125.03,315.4 125.54,309.35L132.01,232.44C132.21,230 132.32,228.78 131.99,228.2C131.52,227.35 130.56,226.92 129.62,227.14C128.98,227.28 128.14,228.18 126.47,229.96L73.96,286.26C69.83,290.69 67.76,292.9 66.98,293C65.85,293.14 64.81,292.37 64.59,291.25C64.44,290.47 65.9,287.81 68.81,282.5L105.83,214.88C107,212.74 107.59,211.66 107.53,211C107.44,210.04 106.74,209.25 105.79,209.06C105.14,208.93 104.02,209.41 101.77,210.36L31.02,240.31C25.46,242.66 22.68,243.84 21.93,243.61C20.84,243.28 20.19,242.15 20.45,241.03C20.63,240.27 23.03,238.43 27.84,234.76L89.01,188.14C90.96,186.66 91.93,185.92 92.14,185.29C92.45,184.37 92.13,183.36 91.34,182.8C90.8,182.42 89.58,182.39 87.14,182.34L10.39,180.77C4.36,180.65 1.34,180.58 0.75,180.07C-0.11,179.32 -0.25,178.02 0.44,177.11C0.91,176.48 3.85,175.79 9.73,174.41L84.47,156.82C86.85,156.27 88.03,155.99 88.48,155.5C89.14,154.79 89.25,153.73 88.76,152.9C88.42,152.33 87.31,151.81 85.11,150.77L15.63,117.94C10.17,115.36 7.43,114.07 7.1,113.36C6.62,112.32 7.02,111.08 8.02,110.53C8.7,110.15 11.67,110.72 17.6,111.86L92.99,126.36C95.39,126.82 96.58,127.06 97.19,126.79C98.08,126.41 98.61,125.49 98.49,124.53C98.41,123.87 97.62,122.94 96.02,121.09L45.83,62.69C41.88,58.1 39.91,55.8 39.89,55.01C39.87,53.87 40.74,52.9 41.88,52.8C42.66,52.74 45.13,54.47 50.09,57.94L113.1,102.02C115.1,103.42 116.1,104.12 116.76,104.13C117.72,104.14 118.58,103.52 118.86,102.59C119.06,101.96 118.71,100.79 118,98.44L95.77,24.57C94.02,18.76 93.15,15.85 93.45,15.13C93.9,14.07 95.08,13.54 96.16,13.91C96.9,14.17 98.46,16.77 101.58,21.96L141.31,88C142.57,90.1 143.21,91.15 143.81,91.43C144.68,91.84 145.71,91.61 146.35,90.89C146.78,90.38 146.94,89.17 147.24,86.74L156.82,10.16Z");
		SHAPES.put("bun", "M0,81.36C0,36.42 36.42,0 81.36,0H228.64C273.58,0 310,36.42 310,81.36C310,118.41 285.23,149.68 251.34,159.5C251.12,159.57 250.97,159.77 250.97,160C250.97,160.23 251.12,160.43 251.34,160.5C285.23,170.32 310,201.59 310,238.64C310,283.58 273.58,320 228.64,320H81.36C36.42,320 0,283.58 0,238.64C0,201.83 24.45,170.73 58,160.69C58.3,160.6 58.51,160.32 58.51,160C58.51,159.68 58.3,159.4 58,159.31C24.45,149.27 0,118.17 0,81.36Z");
		SHAPES.put("burst", "M157.39,2.55C158.13,1.23 158.49,0.58 158.94,0.3C159.59,-0.1 160.41,-0.1 161.06,0.3C161.51,0.58 161.87,1.23 162.61,2.55L187.87,47.7C188.32,48.51 188.55,48.92 188.86,49.16C189.3,49.52 189.87,49.67 190.43,49.58C190.82,49.52 191.22,49.29 192.01,48.81L236.47,22.34C237.76,21.57 238.41,21.18 238.93,21.17C239.7,21.14 240.4,21.55 240.77,22.22C241.02,22.69 241.01,23.44 240.99,24.95L240.29,76.68C240.27,77.61 240.27,78.07 240.41,78.44C240.61,78.97 241.03,79.39 241.56,79.59C241.93,79.73 242.39,79.73 243.32,79.71L295.05,79.01C296.56,78.99 297.31,78.98 297.78,79.23C298.45,79.6 298.86,80.3 298.83,81.07C298.82,81.59 298.43,82.24 297.66,83.53L271.19,127.99C270.71,128.78 270.48,129.18 270.42,129.57C270.33,130.13 270.48,130.7 270.84,131.14C271.08,131.45 271.49,131.68 272.3,132.13L317.45,157.39C318.77,158.13 319.42,158.49 319.7,158.94C320.1,159.59 320.1,160.41 319.7,161.06C319.42,161.51 318.77,161.87 317.45,162.61L272.3,187.87C271.49,188.32 271.08,188.55 270.84,188.86C270.48,189.3 270.33,189.87 270.42,190.43C270.48,190.82 270.71,191.22 271.19,192.01L297.66,236.47C298.43,237.76 298.82,238.41 298.83,238.93C298.86,239.7 298.45,240.4 297.78,240.77C297.31,241.02 296.56,241.01 295.05,240.99L243.32,240.29C242.39,240.27 241.93,240.27 241.56,240.41C241.03,240.61 240.61,241.03 240.41,241.56C240.27,241.93 240.27,242.39 240.29,243.32L240.99,295.05C241.01,296.56 241.02,297.31 240.77,297.78C240.4,298.45 239.7,298.86 238.93,298.83C238.41,298.82 237.76,298.43 236.47,297.66L192.01,271.19C191.22,270.71 190.82,270.48 190.43,270.42C189.87,270.33 189.3,270.48 188.86,270.84C188.55,271.08 188.32,271.49 187.87,272.3L162.61,317.45C161.87,318.77 161.51,319.42 161.06,319.7C160.41,320.1 159.59,320.1 158.94,319.7C158.49,319.42 158.13,318.77 157.39,317.45L132.13,272.3C131.68,271.49 131.45,271.08 131.14,270.84C130.7,270.48 130.13,270.33 129.57,270.42C129.18,270.48 128.78,270.71 127.99,271.19L83.53,297.66C82.24,298.43 81.59,298.82 81.07,298.83C80.3,298.86 79.6,298.45 79.23,297.78C78.98,297.31 78.99,296.56 79.01,295.05L79.71,243.32C79.73,242.39 79.73,241.93 79.59,241.56C79.39,241.03 78.97,240.61 78.44,240.41C78.07,240.27 77.61,240.27 76.68,240.29L24.95,240.99C23.44,241.01 22.69,241.02 22.22,240.77C21.55,240.4 21.14,239.7 21.17,238.93C21.18,238.41 21.57,237.76 22.34,236.47L48.81,192.01C49.29,191.22 49.52,190.82 49.58,190.43C49.67,189.87 49.52,189.3 49.16,188.86C48.92,188.55 48.51,188.32 47.7,187.87L2.55,162.61C1.23,161.87 0.58,161.51 0.3,161.06C-0.1,160.41 -0.1,159.59 0.3,158.94C0.58,158.49 1.23,158.13 2.55,157.39L47.7,132.13C48.51,131.68 48.92,131.45 49.16,131.14C49.52,130.7 49.67,130.13 49.58,129.57C49.52,129.18 49.29,128.78 48.81,127.99L22.34,83.53C21.57,82.24 21.18,81.59 21.17,81.07C21.14,80.3 21.55,79.6 22.22,79.23C22.69,78.98 23.44,78.99 24.95,79.01L76.68,79.71C77.61,79.73 78.07,79.73 78.44,79.59C78.97,79.39 79.39,78.97 79.59,78.44C79.73,78.07 79.73,77.61 79.71,76.68L79.01,24.95C78.99,23.44 78.98,22.69 79.23,22.22C79.6,21.55 80.3,21.14 81.07,21.17C81.59,21.18 82.24,21.57 83.53,22.34L127.99,48.81C128.78,49.29 129.18,49.52 129.57,49.58C130.13,49.67 130.7,49.52 131.14,49.16C131.45,48.92 131.68,48.51 132.13,47.7L157.39,2.55Z");
		SHAPES.put("clamshell", "M306.4,84.08C313.11,97.59 316.47,104.35 318.16,111.4C320.61,121.61 320.61,132.39 318.16,142.6C316.47,149.65 313.11,156.41 306.4,169.92L285.97,211.08C279.26,224.59 275.9,231.34 271.49,236.58C265.12,244.15 257.08,249.54 248.26,252.18C242.15,254 235.45,254 222.03,254H97.97C84.55,254 77.85,254 71.74,252.18C62.92,249.54 54.88,244.15 48.51,236.58C44.1,231.35 40.74,224.59 34.03,211.08L13.6,169.92C6.89,156.41 3.53,149.65 1.84,142.6C-0.61,132.39 -0.61,121.61 1.84,111.4C3.53,104.35 6.89,97.59 13.6,84.08L34.03,42.92C40.74,29.41 44.1,22.66 48.51,17.42C54.88,9.85 62.92,4.46 71.74,1.82C77.85,-0 84.55,0 97.97,0H222.03C235.45,0 242.15,-0 248.26,1.82C257.08,4.46 265.12,9.85 271.49,17.42C275.9,22.66 279.26,29.41 285.97,42.92L306.4,84.08Z");
		SHAPES.put("circle", "M320,160C320,248.37 248.37,320 160,320C71.63,320 -0,248.37 0,160C0,71.63 71.63,-0 160,0C248.37,0 320,71.63 320,160Z");
		SHAPES.put("diamond", "M191.44,276.48C174.61,298.51 166.19,309.53 156.47,314.55C142.38,321.82 125.62,321.82 111.53,314.55C101.81,309.53 93.39,298.51 76.56,276.48L20.65,203.31C10.41,189.91 5.29,183.21 2.75,176.03C-0.92,165.65 -0.92,154.35 2.75,143.97C5.29,136.79 10.41,130.09 20.65,116.69L76.56,43.52C93.39,21.49 101.81,10.47 111.53,5.45C125.62,-1.82 142.38,-1.82 156.47,5.45C166.19,10.47 174.61,21.49 191.44,43.52L247.35,116.69C257.59,130.09 262.71,136.79 265.25,143.97C268.92,154.35 268.92,165.65 265.25,176.03C262.71,183.21 257.59,189.91 247.35,203.31L191.44,276.48Z");
		SHAPES.put("clover8", "M308.58,160C334.43,208.16 314.9,251.77 265.07,265.06C251.77,314.9 208.16,334.42 160,308.58C111.83,334.43 68.22,314.9 54.93,265.07C5.1,251.77 -14.43,208.16 11.42,160C-14.43,111.83 5.1,68.22 54.93,54.93C68.22,5.1 111.83,-14.43 160,11.42C208.16,-14.43 251.77,5.1 265.06,54.93C314.9,68.22 334.42,111.83 308.58,160Z");
		SHAPES.put("fan", "M0,44.21C0,42.65 0,41.87 0.02,41.21C0.72,18.76 18.76,0.72 41.21,0.02C41.87,0 42.65,0 44.21,0C52.53,0 56.69,-0 60.21,0.11C179.96,3.83 276.17,100.04 279.89,219.79C280,223.31 280,227.47 280,235.79C280,237.35 280,238.13 279.98,238.79C279.28,261.24 261.24,279.28 238.79,279.98C238.13,280 237.35,280 235.79,280H62.94C43.93,280 34.42,280 26.87,277.01C15.95,272.69 7.31,264.05 2.99,253.13C-0,245.58 0,236.07 0,217.05V44.21Z");
		SHAPES.put("flower", "M273.13,46.86C261.25,34.99 234.19,40.86 201.55,59.68C191.77,23.29 176.79,0 160,0C143.2,-0 128.22,23.28 118.45,59.68C85.8,40.86 58.75,34.99 46.87,46.86C35,58.74 40.87,85.8 59.69,118.45C23.29,128.22 0,143.2 0,160C0,176.79 23.28,191.77 59.68,201.55C40.85,234.2 34.98,261.26 46.85,273.14C58.73,285.01 85.79,279.14 118.44,260.31C128.22,296.71 143.2,320 160,320C176.79,320 191.77,296.71 201.55,260.31C234.21,279.14 261.27,285.01 273.15,273.14C285.02,261.26 279.15,234.2 260.32,201.55C296.72,191.77 320,176.79 320,160C320,143.2 296.71,128.22 260.3,118.45C279.13,85.8 285,58.74 273.13,46.86Z");
		SHAPES.put("clover4", "M21,148C7.9,132.34 0,112.13 0,90.06C0,40.32 40.11,0 89.6,0C111.99,0 132.47,8.26 148.17,21.91C163.84,8.26 184.27,0 206.61,0C255.98,0 296,40.32 296,90.06C296,112.13 288.12,132.34 275.05,148C288.12,163.66 296,183.87 296,205.94C296,255.68 255.98,296 206.61,296C184.27,296 163.84,287.74 148.17,274.09C132.47,287.74 111.99,296 89.6,296C40.11,296 0,255.68 0,205.94C0,183.87 7.9,163.66 21,148Z");
		SHAPES.put("cookie4", "M178.73,6.21C238.87,-19.91 299.91,41.13 273.79,101.27L269.47,111.21C261.5,129.58 261.5,150.42 269.47,168.79L273.79,178.73C299.91,238.87 238.87,299.91 178.73,273.79L168.79,269.47C150.42,261.5 129.58,261.5 111.21,269.47L101.27,273.79C41.13,299.91 -19.91,238.87 6.21,178.73L10.53,168.79C18.5,150.42 18.5,129.58 10.53,111.21L6.21,101.27C-19.91,41.13 41.13,-19.91 101.27,6.21L111.21,10.53C129.58,18.5 150.42,18.5 168.79,10.53L178.73,6.21Z");
		SHAPES.put("gem", "M92.48,26.63C110.64,13.44 119.73,6.84 129.41,3.56C143.41,-1.19 158.59,-1.19 172.59,3.56C182.27,6.84 191.36,13.44 209.52,26.63L250.37,56.3C261.16,64.14 266.56,68.06 270.95,72.76C277.31,79.56 282.18,87.6 285.27,96.38C287.41,102.45 288.38,109.05 290.34,122.24L297.9,173.24C301.33,196.37 303.05,207.94 301.32,218.37C298.81,233.45 291.24,247.23 279.86,257.43C271.99,264.49 261.3,269.24 239.93,278.76L191.52,300.33C178.62,306.07 172.17,308.94 165.55,310.41C155.96,312.53 146.04,312.53 136.45,310.41C129.83,308.94 123.38,306.07 110.48,300.33L62.07,278.76C40.7,269.24 30.01,264.49 22.14,257.43C10.76,247.23 3.19,233.45 0.68,218.37C-1.05,207.94 0.67,196.37 4.1,173.24L11.66,122.24C13.62,109.05 14.59,102.45 16.73,96.38C19.82,87.6 24.69,79.56 31.05,72.76C35.44,68.06 40.84,64.14 51.63,56.3L92.48,26.63Z");
		SHAPES.put("ghost", "M0,144.76C0,64.81 68.05,0 152,0C235.95,0 304,64.81 304,144.76V246.1C304,278.08 276.78,304 243.2,304C233.25,304 223.85,301.72 215.56,297.68C211.34,295.63 207.12,293.37 202.88,291.11C187.99,283.14 172.87,275.05 156.33,275.05H147.67C131.13,275.05 116.01,283.14 101.11,291.11C96.88,293.37 92.67,295.63 88.44,297.68C80.15,301.72 70.75,304 60.8,304C27.22,304 0,278.08 0,246.1V144.76Z");
		SHAPES.put("heart", "M251.1,0.13C229.44,0.13 210.11,10.3 197.48,26.2L160,67.51V67.38L122.52,26.06C109.89,10.17 90.56,0 68.9,0C30.85,0 0,31.37 0,70.06C0,104.06 28.38,129.47 48.92,153.88C69.39,178.21 89.86,202.52 110.32,226.84L156.27,281.44C157.52,282.91 158.76,284.39 160,285.87V286C161.24,284.52 162.48,283.05 163.73,281.57C179.04,263.37 194.36,245.18 209.68,226.98C230.14,202.66 250.61,178.34 271.08,154.02C291.63,129.61 320,104.2 320,70.19C320,31.5 289.15,0.13 251.1,0.13Z");
		SHAPES.put("cookie9", "M125.26,13.38C126.99,11.95 127.85,11.24 128.64,10.64C147.19,-3.55 172.81,-3.55 191.36,10.64C192.15,11.24 193.01,11.95 194.74,13.38C195.51,14.01 195.89,14.33 196.27,14.64C205,21.58 215.71,25.52 226.82,25.87C227.3,25.88 227.8,25.89 228.79,25.9C231.02,25.93 232.14,25.94 233.12,25.99C256.36,27.18 275.98,43.82 281.17,66.73C281.39,67.7 281.6,68.81 282.02,71.02C282.2,72.01 282.29,72.5 282.39,72.98C284.66,83.98 290.36,93.94 298.64,101.42C299.01,101.75 299.38,102.08 300.14,102.73C301.83,104.2 302.67,104.94 303.39,105.62C320.44,121.61 324.89,147.11 314.29,168.03C313.84,168.92 313.29,169.9 312.2,171.86C311.71,172.74 311.47,173.18 311.24,173.61C305.99,183.5 304.01,194.84 305.6,205.95C305.67,206.44 305.75,206.93 305.91,207.92C306.27,210.15 306.45,211.26 306.57,212.25C309.45,235.57 296.64,257.99 275.21,267.13C274.3,267.52 273.25,267.92 271.17,268.72C270.24,269.07 269.77,269.25 269.32,269.43C259,273.6 250.28,281 244.42,290.54C244.17,290.96 243.92,291.39 243.41,292.25C242.27,294.19 241.7,295.16 241.16,296C228.53,315.73 204.46,324.59 182.22,317.67C181.28,317.38 180.22,317.01 178.12,316.26C177.18,315.93 176.71,315.76 176.25,315.61C165.7,312.1 154.3,312.1 143.75,315.61C143.29,315.76 142.82,315.93 141.88,316.26C139.78,317.01 138.72,317.38 137.78,317.67C115.54,324.59 91.47,315.73 78.84,296C78.3,295.16 77.73,294.19 76.59,292.25C76.08,291.39 75.83,290.96 75.58,290.54C69.72,281 61,273.6 50.68,269.43C50.23,269.25 49.76,269.07 48.83,268.72C46.75,267.92 45.7,267.52 44.79,267.13C23.36,257.99 10.55,235.57 13.43,212.25C13.55,211.26 13.73,210.15 14.09,207.92C14.25,206.93 14.33,206.44 14.4,205.95C15.99,194.84 14.01,183.5 8.76,173.61C8.53,173.18 8.29,172.74 7.8,171.86C6.71,169.9 6.16,168.92 5.71,168.03C-4.89,147.11 -0.44,121.61 16.61,105.62C17.33,104.94 18.17,104.2 19.86,102.73C20.62,102.08 20.99,101.75 21.36,101.42C29.64,93.94 35.34,83.98 37.61,72.98C37.71,72.5 37.8,72.01 37.98,71.02C38.4,68.81 38.61,67.7 38.83,66.73C44.02,43.82 63.64,27.18 86.88,25.99C87.86,25.94 88.98,25.93 91.21,25.9C92.2,25.89 92.7,25.88 93.18,25.87C104.29,25.52 115,21.58 123.73,14.64C124.11,14.33 124.49,14.01 125.26,13.38Z");
		SHAPES.put("oval", "M231.31,231.31C161.71,300.91 68.88,320.94 23.97,276.03C-20.94,231.12 -0.91,138.29 68.69,68.69C138.29,-0.91 231.12,-20.94 276.03,23.97C320.93,68.88 300.91,161.71 231.31,231.31Z");
		SHAPES.put("pentagon", "M109.63,24.37C125.24,12.29 133.04,6.25 141.38,3.25C153.44,-1.08 166.56,-1.08 178.62,3.25C186.96,6.25 194.76,12.29 210.37,24.37L244.51,50.8L278.63,75.56C294.82,87.31 302.92,93.19 308.33,100.57C316.15,111.26 320.27,124.39 319.99,137.82C319.79,147.11 316.58,156.82 310.14,176.23L296.74,216.66L284.38,258.08C278.57,277.52 275.67,287.24 270.6,294.8C263.26,305.74 252.59,313.78 240.32,317.63C231.84,320.3 222.06,320.14 202.5,319.83L160,319.16L117.5,319.83C97.94,320.14 88.16,320.3 79.68,317.63C67.41,313.78 56.74,305.74 49.4,294.8C44.33,287.24 41.43,277.52 35.62,258.08L23.26,216.66L9.86,176.23C3.42,156.82 0.21,147.11 0.01,137.82C-0.27,124.39 3.85,111.26 11.67,100.57C17.08,93.19 25.18,87.31 41.37,75.56L75.49,50.8L109.63,24.37Z");
		SHAPES.put("pill", "M79.86,37.77C130.22,-12.59 211.87,-12.59 262.23,37.77C312.59,88.13 312.59,169.78 262.23,220.14L220.14,262.23C169.78,312.59 88.13,312.59 37.77,262.23C-12.59,211.87 -12.59,130.22 37.77,79.86L79.86,37.77Z");
		SHAPES.put("pixelcircle", "M225.19,0H94.81V20.74H50.37V47.41H23.7V94.81H0V225.19H23.7V272.59H50.37V299.26H94.81V320H225.19V299.26H269.63V272.59H296.3V225.19H320V94.81H296.3V47.41H269.63V20.74H225.19V0Z");
		SHAPES.put("pixeltriangle", "M55.64,0H0V320H55.64V292.17H98.56V265.74H143.08V235.13H179.64V210.09H216.21V179.48H248V140.52H216.21V109.91H179.64V84.87H143.08V54.26H98.56V27.83H55.64V0Z");
		SHAPES.put("puffy", "M319.98,138.11C319.72,116.57 303.73,99.33 284.24,99.62C283.17,99.62 282.11,99.71 281.06,99.84C281.88,99.1 282.68,98.34 283.44,97.51C297.4,82.49 297.69,57.78 284.11,42.34C283.31,41.44 282.52,40.54 281.7,39.67C267.74,24.65 245.42,24.98 231.82,40.42C231.07,41.26 230.39,42.15 229.72,43.05C229.83,41.89 229.9,40.72 229.92,39.53C230.19,18 214.61,0.31 195.14,0C194.57,0 194,0 193.43,0H192.27C177.84,0 165.46,9.59 160,23.32C154.54,9.59 142.15,0 127.73,0H126.57C126,0 125.43,0 124.86,0C105.39,0.29 89.81,17.98 90.07,39.53C90.07,40.72 90.15,41.89 90.26,43.05C89.6,42.15 88.91,41.26 88.16,40.42C74.58,24.98 52.24,24.65 38.28,39.67C37.47,40.56 36.65,41.44 35.87,42.34C22.29,57.78 22.58,82.47 36.54,97.51C37.31,98.34 38.1,99.1 38.92,99.84C37.88,99.71 36.82,99.64 35.74,99.62C16.27,99.33 0.28,116.57 0,138.11C0,138.74 0,139.37 0,140C0,140.63 0,141.26 0,141.89C0.26,163.43 16.26,180.67 35.74,180.38C36.82,180.38 37.88,180.29 38.92,180.16C38.1,180.9 37.31,181.66 36.54,182.49C22.58,197.51 22.29,222.22 35.87,237.66C36.67,238.56 37.47,239.46 38.28,240.32C52.24,255.35 74.56,255.02 88.16,239.59C88.91,238.74 89.6,237.85 90.26,236.95C90.15,238.11 90.08,239.28 90.07,240.47C89.81,262 105.38,279.71 124.86,280C125.43,280 126,280 126.57,280H127.73C142.16,280 154.54,270.41 160,256.68C165.46,270.41 177.85,280 192.27,280H193.43C194,280 194.57,280 195.14,280C214.61,279.71 230.19,262.02 229.93,240.47C229.93,239.28 229.85,238.11 229.74,236.95C230.4,237.85 231.09,238.74 231.84,239.59C245.42,255.02 267.76,255.35 281.72,240.32C282.53,239.44 283.35,238.56 284.13,237.66C297.71,222.22 297.42,197.53 283.46,182.49C282.69,181.66 281.9,180.9 281.08,180.16C282.12,180.29 283.18,180.36 284.26,180.38C303.73,180.67 319.74,163.45 320,141.89C320,141.26 320,140.63 320,140C320,139.37 320,138.74 320,138.11H319.98Z");
		SHAPES.put("puffydiamond", "M249.4,249.75C261.48,237.67 265.57,220.61 261.66,205.16C277.12,209.09 294.2,205 306.3,192.9C324.57,174.64 324.57,145.02 306.3,126.75C294.27,114.73 277.32,110.62 261.94,114.43C265.37,99.29 261.19,82.77 249.4,70.97C237.28,58.86 220.17,54.78 204.7,58.74C208.8,43.17 204.75,25.9 192.54,13.7C174.28,-4.57 144.66,-4.57 126.4,13.7C114.27,25.83 110.19,42.97 114.17,58.46C99,54.99 82.43,59.16 70.62,70.97C58.83,82.77 54.65,99.29 58.08,114.43C42.69,110.62 25.73,114.72 13.7,126.75C-4.57,145.02 -4.57,174.64 13.7,192.9C25.8,205.01 42.89,209.09 58.35,205.15C54.44,220.6 58.53,237.66 70.62,249.75C82.38,261.52 98.86,265.71 113.98,262.31C110.33,277.6 114.47,294.37 126.4,306.3C144.66,324.57 174.28,324.57 192.54,306.3C204.54,294.3 208.66,277.4 204.89,262.04C220.32,265.91 237.33,261.82 249.4,249.75Z");
		SHAPES.put("semicircle", "M320,166.92C320,185.19 305.19,200 286.92,200H33.08C14.81,200 0,185.19 0,166.92V160C-0,71.63 71.63,0 160,0C248.37,0 320,71.63 320,160V166.92Z");
		SHAPES.put("cookie7", "M112.67,19.78C116.24,16.64 118.03,15.07 119.67,13.8C143.43,-4.6 176.57,-4.6 200.33,13.8C201.97,15.07 203.76,16.64 207.33,19.78C208.53,20.84 209.12,21.36 209.72,21.87C218.14,28.92 228.17,33.77 238.92,35.96C239.69,36.12 240.47,36.26 242.04,36.54C246.72,37.38 249.06,37.79 251.07,38.29C280.23,45.43 300.9,71.41 301.36,101.49C301.4,103.57 301.28,105.95 301.06,110.71C300.98,112.31 300.94,113.1 300.92,113.89C300.67,124.88 303.14,135.76 308.14,145.55C308.49,146.25 308.87,146.95 309.63,148.36C311.89,152.55 313.03,154.64 313.9,156.53C326.5,183.83 319.13,216.23 295.95,235.34C294.35,236.67 292.42,238.06 288.57,240.85C287.28,241.79 286.63,242.25 286.01,242.73C277.27,249.38 270.33,258.11 265.8,268.12C265.48,268.84 265.17,269.57 264.55,271.04C262.69,275.43 261.76,277.62 260.83,279.48C247.39,306.38 217.53,320.8 188.16,314.56C186.13,314.12 183.84,313.48 179.26,312.2C177.73,311.78 176.96,311.56 176.2,311.37C165.57,308.67 154.43,308.67 143.8,311.37C143.04,311.56 142.27,311.78 140.74,312.2C136.16,313.48 133.87,314.12 131.84,314.56C102.47,320.8 72.61,306.38 59.17,279.48C58.24,277.62 57.31,275.43 55.45,271.04C54.83,269.57 54.52,268.84 54.2,268.12C49.67,258.11 42.73,249.38 33.99,242.73C33.37,242.25 32.72,241.79 31.43,240.85C27.58,238.06 25.65,236.67 24.05,235.34C0.87,216.23 -6.5,183.83 6.1,156.53C6.97,154.64 8.11,152.55 10.37,148.36C11.13,146.95 11.51,146.25 11.86,145.55C16.86,135.76 19.34,124.88 19.07,113.89C19.06,113.1 19.02,112.31 18.94,110.71C18.72,105.95 18.6,103.57 18.64,101.49C19.1,71.41 39.77,45.43 68.93,38.29C70.94,37.79 73.28,37.38 77.96,36.54C79.53,36.26 80.31,36.12 81.08,35.96C91.83,33.77 101.86,28.92 110.28,21.87C110.88,21.36 111.47,20.84 112.67,19.78Z");
		SHAPES.put("cookie6", "M92.19,22.57C123.28,-7.52 172.72,-7.52 203.81,22.57C213.33,31.77 224.98,38.48 237.74,42.09C279.42,53.89 304.14,96.59 293.55,138.47C290.31,151.29 290.31,164.71 293.55,177.53C304.14,219.41 279.42,262.11 237.74,273.91C224.98,277.52 213.33,284.23 203.81,293.43C172.72,323.52 123.28,323.52 92.19,293.43C82.67,284.23 71.02,277.52 58.26,273.91C16.58,262.11 -8.14,219.41 2.45,177.53C5.69,164.71 5.69,151.29 2.45,138.47C-8.14,96.59 16.58,53.89 58.26,42.09C71.02,38.48 82.67,31.77 92.19,22.57Z");
		SHAPES.put("slanted", "M15.72,80.54C18.29,55.96 19.58,43.67 24.3,33.98C31.14,19.94 43.08,9.11 57.63,3.72C67.68,0 79.93,0 104.43,0H228.14C257.76,0 272.58,0 283.89,4.85C300.26,11.88 312.72,25.85 317.93,43.02C321.52,54.87 319.97,69.73 316.85,99.46L304.29,219.46C301.71,244.04 300.42,256.33 295.7,266.02C288.86,280.05 276.92,290.89 262.37,296.28C252.32,300 240.07,300 215.57,300H91.86C62.24,300 47.42,300 36.11,295.15C19.74,288.12 7.28,274.15 2.07,256.98C-1.52,245.13 0.03,230.27 3.15,200.54L15.72,80.54Z");
		SHAPES.put("softburst", "M145.15,7.9C151.98,-2.63 168.02,-2.63 174.85,7.9L191.24,33.17C195.73,40.09 204.8,42.91 212.69,39.83L241.47,28.6C253.48,23.92 266.45,32.93 265.51,45.3L263.24,74.95C262.61,83.08 268.21,90.45 276.49,92.4L306.68,99.49C319.27,102.45 324.23,117.03 315.86,126.51L295.8,149.21C290.3,155.44 290.3,164.56 295.8,170.79L315.86,193.49C324.23,202.97 319.27,217.55 306.68,220.51L276.49,227.6C268.21,229.55 262.61,236.92 263.24,245.05L265.51,274.7C266.45,287.07 253.48,296.08 241.47,291.4L212.69,280.17C204.8,277.09 195.73,279.91 191.24,286.84L174.85,312.1C168.02,322.63 151.98,322.63 145.15,312.1L128.76,286.84C124.27,279.91 115.2,277.09 107.31,280.17L78.53,291.4C66.52,296.08 53.55,287.07 54.49,274.7L56.76,245.05C57.39,236.92 51.79,229.55 43.51,227.6L13.32,220.51C0.73,217.55 -4.23,202.97 4.14,193.49L24.2,170.79C29.7,164.56 29.7,155.44 24.2,149.21L4.14,126.51C-4.23,117.03 0.73,102.45 13.32,99.49L43.51,92.4C51.79,90.45 57.39,83.08 56.76,74.95L54.49,45.3C53.55,32.93 66.52,23.92 78.53,28.6L107.31,39.83C115.2,42.91 124.27,40.09 128.76,33.17L145.15,7.9Z");
		SHAPES.put("softboom", "M174.94,84.95C197.48,-28.32 122.55,-28.32 145.08,84.95C122.55,-28.32 53.33,0.35 117.49,96.38C53.33,0.35 0.35,53.33 96.38,117.49C0.35,53.33 -28.32,122.55 84.95,145.07C-28.32,122.54 -28.32,197.46 84.95,174.93C-28.32,197.46 0.37,266.67 96.38,202.51C0.37,266.67 53.34,319.65 117.49,223.62C53.33,319.63 122.55,348.3 145.07,235.05C122.54,348.32 197.46,348.32 174.93,235.05C197.46,348.32 266.67,319.63 202.51,223.62C266.67,319.63 319.65,266.66 223.62,202.51C319.63,266.67 348.3,197.45 235.05,174.93C348.32,197.46 348.32,122.54 235.05,145.07C348.32,122.54 319.63,53.33 223.62,117.49C319.63,53.33 266.66,0.35 202.51,96.38C266.67,0.37 197.45,-28.3 174.93,84.95H174.94Z");
		SHAPES.put("square", "M320,172C320,216.72 320,239.08 312.98,256.81C302.81,282.49 282.49,302.81 256.81,312.98C239.08,320 216.72,320 172,320H148C103.28,320 80.92,320 63.19,312.98C37.51,302.81 17.19,282.49 7.02,256.81C0,239.08 0,216.72 0,172V148C0,103.28 0,80.92 7.02,63.19C17.19,37.51 37.51,17.19 63.19,7.02C80.92,-0 103.28,0 148,0H172C216.72,0 239.08,-0 256.81,7.02C282.49,17.19 302.81,37.51 312.98,63.19C320,80.92 320,103.28 320,148V172Z");
		SHAPES.put("sunny", "M261.86,41.24C272.43,41.96 277.72,42.32 281.99,44.18C288.17,46.89 293.11,51.83 295.82,58.01C297.68,62.28 298.04,67.57 298.76,78.14L300.4,102.27C300.69,106.55 300.84,108.69 301.3,110.73C301.98,113.68 303.14,116.5 304.75,119.06C305.87,120.84 307.28,122.45 310.1,125.68L326,143.9C332.97,151.89 336.45,155.88 338.15,160.22C340.61,166.51 340.61,173.49 338.15,179.78C336.45,184.12 332.97,188.11 326,196.1L310.1,214.32C307.28,217.55 305.87,219.16 304.75,220.94C303.14,223.5 301.98,226.32 301.3,229.27C300.84,231.31 300.69,233.45 300.4,237.73L298.76,261.86C298.04,272.43 297.68,277.72 295.82,281.99C293.11,288.17 288.17,293.11 281.99,295.82C277.72,297.68 272.43,298.04 261.86,298.76L237.73,300.4C233.45,300.69 231.31,300.84 229.27,301.3C226.32,301.97 223.5,303.14 220.94,304.75C219.16,305.87 217.55,307.28 214.32,310.1L196.1,326C188.11,332.97 184.12,336.45 179.77,338.15C173.49,340.62 166.51,340.62 160.23,338.15C155.88,336.45 151.89,332.97 143.9,326L125.68,310.1C122.45,307.28 120.84,305.87 119.06,304.75C116.5,303.14 113.68,301.97 110.73,301.3C108.69,300.84 106.55,300.69 102.28,300.4L78.14,298.76C67.57,298.04 62.28,297.68 58.01,295.82C51.83,293.11 46.89,288.17 44.18,281.99C42.32,277.72 41.96,272.43 41.24,261.86L39.6,237.73C39.31,233.45 39.16,231.31 38.7,229.27C38.03,226.32 36.86,223.5 35.25,220.94C34.13,219.16 32.72,217.55 29.9,214.32L14,196.1C7.03,188.11 3.55,184.12 1.85,179.78C-0.62,173.49 -0.62,166.51 1.85,160.22C3.55,155.88 7.03,151.89 14,143.9L29.9,125.68C32.72,122.45 34.13,120.84 35.25,119.06C36.86,116.5 38.03,113.68 38.7,110.73C39.16,108.69 39.31,106.55 39.6,102.27L41.24,78.14C41.96,67.57 42.32,62.28 44.18,58.01C46.89,51.83 51.83,46.89 58.01,44.18C62.28,42.32 67.57,41.96 78.14,41.24L102.28,39.6C106.55,39.31 108.69,39.16 110.73,38.7C113.68,38.03 116.5,36.86 119.06,35.25C120.84,34.13 122.45,32.72 125.68,29.9L143.9,14C151.89,7.03 155.88,3.55 160.23,1.85C166.51,-0.62 173.49,-0.62 179.77,1.85C184.12,3.55 188.11,7.03 196.1,14L214.32,29.9C217.55,32.72 219.16,34.13 220.94,35.25C223.5,36.86 226.32,38.03 229.27,38.7C231.31,39.16 233.45,39.31 237.73,39.6L261.86,41.24Z");
		SHAPES.put("triangle", "M104.46,51.2C119.6,24.82 127.17,11.63 136.34,6.06C149.65,-2.02 166.35,-2.02 179.66,6.06C188.84,11.63 196.4,24.82 211.54,51.2L293.31,193.72C308.3,219.85 315.8,232.91 315.99,243.58C316.28,259.06 307.95,273.42 294.36,280.86C284.99,286 269.92,286 239.77,286H76.23C46.08,286 31.01,286 21.64,280.86C8.05,273.42 -0.28,259.06 0.01,243.58C0.2,232.91 7.7,219.85 22.69,193.72L104.46,51.2Z");
		SHAPES.put("cookie12", "M136.7,9.85C137.24,9.32 137.51,9.05 137.74,8.83C150.25,-2.94 169.75,-2.94 182.26,8.83C182.49,9.05 182.76,9.32 183.3,9.85C183.63,10.16 183.79,10.32 183.94,10.47C191.95,18.11 203.28,21.14 214.03,18.53C214.24,18.48 214.46,18.42 214.9,18.31C215.63,18.12 216,18.03 216.31,17.95C233.02,14.01 249.92,23.76 254.86,40.21C254.95,40.52 255.05,40.88 255.26,41.61C255.38,42.05 255.44,42.27 255.5,42.48C258.61,53.09 266.91,61.39 277.52,64.5C277.73,64.56 277.95,64.62 278.39,64.74C279.12,64.95 279.48,65.05 279.79,65.14C296.24,70.08 305.99,86.98 302.05,103.69C301.97,104 301.88,104.37 301.69,105.1C301.58,105.54 301.52,105.76 301.47,105.97C298.86,116.72 301.89,128.05 309.53,136.06C309.68,136.21 309.84,136.37 310.15,136.7C310.68,137.24 310.95,137.51 311.17,137.74C322.94,150.25 322.94,169.75 311.17,182.26C310.95,182.49 310.68,182.76 310.15,183.3C309.84,183.63 309.68,183.79 309.53,183.94C301.89,191.95 298.86,203.28 301.47,214.03C301.52,214.24 301.58,214.46 301.69,214.9C301.88,215.63 301.97,216 302.05,216.31C305.99,233.02 296.24,249.92 279.79,254.86C279.48,254.95 279.12,255.05 278.39,255.26C277.95,255.38 277.73,255.44 277.52,255.5C266.91,258.61 258.61,266.91 255.5,277.52C255.44,277.73 255.38,277.95 255.26,278.39C255.05,279.12 254.95,279.48 254.86,279.79C249.92,296.24 233.02,305.99 216.31,302.05C216,301.97 215.63,301.88 214.9,301.69C214.46,301.58 214.24,301.52 214.03,301.47C203.28,298.86 191.95,301.89 183.94,309.53C183.79,309.68 183.63,309.84 183.3,310.15C182.76,310.68 182.49,310.95 182.26,311.17C169.75,322.94 150.25,322.94 137.74,311.17C137.51,310.95 137.24,310.68 136.7,310.15C136.37,309.84 136.21,309.68 136.06,309.53C128.05,301.89 116.72,298.86 105.97,301.47C105.76,301.52 105.54,301.58 105.1,301.69C104.37,301.88 104,301.97 103.69,302.05C86.98,305.99 70.08,296.24 65.14,279.79C65.05,279.48 64.95,279.12 64.74,278.39C64.62,277.95 64.56,277.73 64.5,277.52C61.39,266.91 53.09,258.61 42.48,255.5C42.27,255.44 42.05,255.38 41.61,255.26C40.88,255.05 40.52,254.95 40.21,254.86C23.76,249.92 14.01,233.02 17.95,216.31C18.03,216 18.12,215.63 18.31,214.9C18.42,214.46 18.48,214.24 18.53,214.03C21.14,203.28 18.11,191.95 10.47,183.94C10.32,183.79 10.16,183.63 9.85,183.3C9.32,182.76 9.05,182.49 8.83,182.26C-2.94,169.75 -2.94,150.25 8.83,137.74C9.05,137.51 9.32,137.24 9.85,136.7C10.16,136.37 10.32,136.21 10.47,136.06C18.11,128.05 21.14,116.72 18.53,105.97C18.48,105.76 18.42,105.54 18.31,105.1C18.12,104.37 18.03,104 17.95,103.69C14.01,86.98 23.76,70.08 40.21,65.14C40.52,65.05 40.88,64.95 41.61,64.74C42.05,64.62 42.27,64.56 42.48,64.5C53.09,61.39 61.39,53.09 64.5,42.48C64.56,42.27 64.62,42.05 64.74,41.61C64.95,40.88 65.05,40.52 65.14,40.21C70.08,23.76 86.98,14.01 103.69,17.95C104,18.03 104.37,18.12 105.1,18.31C105.54,18.42 105.76,18.48 105.97,18.53C116.72,21.14 128.05,18.11 136.06,10.47C136.21,10.32 136.37,10.16 136.7,9.85Z");
		SHAPES.put("verysunny", "M136.72,13.19C147.26,-4.4 172.74,-4.4 183.28,13.19L195.12,32.96C201.27,43.21 213.4,48.24 224.99,45.33L247.35,39.73C267.24,34.75 285.25,52.76 280.27,72.65L274.67,95.01C271.76,106.6 276.79,118.73 287.04,124.88L306.81,136.72C324.4,147.26 324.4,172.74 306.81,183.28L287.04,195.12C276.79,201.27 271.76,213.4 274.67,224.99L280.27,247.35C285.25,267.24 267.24,285.25 247.35,280.27L224.99,274.67C213.4,271.76 201.27,276.79 195.12,287.04L183.28,306.81C172.74,324.4 147.26,324.4 136.72,306.81L124.88,287.04C118.73,276.79 106.6,271.76 95.01,274.67L72.65,280.27C52.76,285.25 34.75,267.24 39.73,247.35L45.33,224.99C48.24,213.4 43.21,201.27 32.96,195.12L13.19,183.28C-4.4,172.74 -4.4,147.26 13.19,136.72L32.96,124.88C43.21,118.73 48.24,106.6 45.33,95.01L39.73,72.65C34.75,52.76 52.76,34.75 72.64,39.73L95.01,45.33C106.6,48.24 118.73,43.21 124.88,32.96L136.72,13.19Z");
	}
	
	private Path currentPath = new Path();
	private Path drawPath = new Path();
	private RectF srcBounds = new RectF();
	private RectF dstBounds = new RectF();
	private Matrix scaleMatrix = new Matrix();
	private Paint fillPaint = new Paint(Paint.ANTI_ALIAS_FLAG);
	private String currentShapeName = "circle";
	
	private ValueAnimator rotateAnimator, pulseAnimator;
	private float accumulatedRotation = 0f;
	private float lastRotationFraction = 0f;
	private float pulseScale = 1f;
	private List<String> morphSequence = new ArrayList<>();
	private int morphIndex = 0;
	
	private ValueAnimator colorAnimator;
	private ValueAnimator multiColorAnimator;
	private int multiColorIndex = 0;
	private boolean autoCycleEnabled = true;
	private long holdDuration = 3000;
	private long transitionDuration = 500;
	
	public FasterExpressiveShapes(Context context) { super(context); init(); }
	public FasterExpressiveShapes(Context context, @Nullable AttributeSet attrs) { super(context, attrs); init(); }
	public FasterExpressiveShapes(Context context, @Nullable AttributeSet attrs, int defStyleAttr) { super(context, attrs, defStyleAttr); init(); }
	
	private void init(){
		setWillNotDraw(false);
		setLayerType(LAYER_TYPE_HARDWARE,null);
		fillPaint.setStyle(Paint.Style.FILL);
		fillPaint.setColor(resolveThemeColor(getContext()));
		setShapeByName(currentShapeName);
	}
	
	public void setShapeByName(String name){
		String data = SHAPES.get(name);
		if(data==null) return;
		currentShapeName = name;
		Path p = PathParser.createPathFromPathData(data);
		if(p!=null){
			currentPath.set(p);
			currentPath.computeBounds(srcBounds,true);
			invalidate();
		}
	}
	
	public void morphToShape(String name,long duration){
		setShapeByName(name);
	}
	
	public void startMorphSequence(List<String> shapes, long durationPerShape) {
		if (shapes == null || shapes.isEmpty()) return;
		morphSequence.clear();
		morphSequence.addAll(shapes);
		morphIndex = 0;
		
		scheduleNextMorph(durationPerShape);
	}
	
	private void scheduleNextMorph(long durationPerShape) {
		if (morphIndex >= morphSequence.size()) return;
		
		String nextShape = morphSequence.get(morphIndex);
		setShapeByName(nextShape);
		
		morphIndex++;
		
		if (durationPerShape > 0 && morphIndex < morphSequence.size()) {
			postDelayed(() -> scheduleNextMorph(durationPerShape), durationPerShape);
		}
	}
	
	@Override
	protected void onDetachedFromWindow() {
		super.onDetachedFromWindow();
		if (rotateAnimator != null) { rotateAnimator.cancel(); rotateAnimator = null; }
		if (pulseAnimator != null) { pulseAnimator.cancel(); pulseAnimator = null; }
		if (colorAnimator != null) { colorAnimator.cancel(); colorAnimator = null; }
		if (multiColorAnimator != null) { multiColorAnimator.cancel(); multiColorAnimator = null; }
	}
	
	public void setRotationAnimation(float degreesPerSecond){
		if(rotateAnimator!=null) rotateAnimator.cancel();
		if(degreesPerSecond==0f){
			setRotation(0f);
			accumulatedRotation = 0f;
			lastRotationFraction = 0f;
			return;
		}
		
		final float direction = Math.signum(degreesPerSecond);
		final long durationForOneRevMs = (long)(360_000f / Math.abs(degreesPerSecond));
		
		rotateAnimator = ValueAnimator.ofFloat(0f,1f);
		rotateAnimator.setDuration(durationForOneRevMs);
		rotateAnimator.setInterpolator(new LinearInterpolator());
		rotateAnimator.setRepeatCount(ValueAnimator.INFINITE);
		rotateAnimator.addUpdateListener(anim -> {
			float frac = (Float) anim.getAnimatedValue();
			float delta = frac - lastRotationFraction;
			if(delta < 0f) delta += 1f;
			accumulatedRotation = (accumulatedRotation + direction * delta * 360f) % 360f;
			if(accumulatedRotation < 0f) accumulatedRotation += 360f;
			setRotation(accumulatedRotation);
			lastRotationFraction = frac;
		});
		rotateAnimator.addListener(new AnimatorListenerAdapter(){
			@Override
			public void onAnimationStart(android.animation.Animator animation){
				lastRotationFraction = 0f;
				accumulatedRotation = getRotation() % 360f;
				if(accumulatedRotation < 0f) accumulatedRotation += 360f;
			}
		});
		rotateAnimator.start();
	}
	
	public void setPulseAnimation(boolean enabled,float min,float max,long duration){
		if(pulseAnimator!=null) pulseAnimator.cancel();
		if(!enabled){
			pulseScale = 1f;
			invalidate();
			return;
		}
		pulseAnimator = ValueAnimator.ofFloat(min,max);
		pulseAnimator.setDuration(duration);
		pulseAnimator.setRepeatCount(ValueAnimator.INFINITE);
		pulseAnimator.setRepeatMode(ValueAnimator.REVERSE);
		pulseAnimator.setInterpolator(new EaseInOut());
		pulseAnimator.addUpdateListener(a->{
			pulseScale = (Float)a.getAnimatedValue();
			invalidate();
		});
		pulseAnimator.start();
	}
	
	@Override
	protected void dispatchDraw(Canvas canvas){
		ensureTransformed();
		int save = canvas.save();
		float cx = getWidth() * 0.5f;
		float cy = getHeight() * 0.5f;
		canvas.scale(pulseScale, pulseScale, cx, cy);
		canvas.clipPath(drawPath);
		super.dispatchDraw(canvas);
		canvas.restoreToCount(save);
	}
	
	@Override
	protected void onDraw(Canvas canvas){
		super.onDraw(canvas);
		ensureTransformed();
		int save = canvas.save();
		float cx = getWidth() * 0.5f;
		float cy = getHeight() * 0.5f;
		canvas.scale(pulseScale, pulseScale, cx, cy);
		canvas.drawPath(drawPath,fillPaint);
		canvas.restoreToCount(save);
	}
	
	private void ensureTransformed(){
		if(getWidth()==0 || getHeight()==0) return;
		float srcW = srcBounds.width() <= 0.0001f ? 1f : srcBounds.width();
		float srcH = srcBounds.height() <= 0.0001f ? 1f : srcBounds.height();
		dstBounds.set(0,0,getWidth(),getHeight());
		scaleMatrix.reset();
		float sx = dstBounds.width()/srcW;
		float sy = dstBounds.height()/srcH;
		float s = Math.min(sx,sy);
		scaleMatrix.setScale(s,s);
		scaleMatrix.postTranslate((dstBounds.width()-srcW*s)/2f,(dstBounds.height()-srcH*s)/2f);
		drawPath.reset();
		drawPath.addPath(currentPath,scaleMatrix);
	}
	
	public static void registerShape(String name,String pathData){
		if(name!=null && pathData!=null) SHAPES.put(name,pathData);
	}
	
	private static int resolveThemeColor(Context context){
		TypedValue tv=new TypedValue();
		boolean ok=context.getTheme().resolveAttribute(R.attr.colorPrimaryContainer,tv,true);
		if(!ok) ok=context.getTheme().resolveAttribute(android.R.attr.colorAccent,tv,true);
		return ok? tv.data : 0xFFB2D18A;
	}
	
	public void setFillColor(int color){
		fillPaint.setColor(color);
		invalidate();
	}
	
	public void setFillColorFromTheme(){
		fillPaint.setColor(resolveThemeColor(getContext()));
		invalidate();
	}
	
	public void animateFillColor(int fromColor, int toColor, long duration){
		if(colorAnimator != null) colorAnimator.cancel();
		colorAnimator = ValueAnimator.ofObject(new ArgbEvaluator(), fromColor, toColor);
		colorAnimator.setDuration(duration);
		colorAnimator.addUpdateListener(anim -> {
			fillPaint.setColor((int) anim.getAnimatedValue());
			invalidate();
		});
		colorAnimator.start();
	}
	
	public void animateColorsComfortably(List<Integer> attrList, long holdMs, long transitionMs, boolean stopAfterFullCycle) {
		if (attrList == null || attrList.size() < 2) return;
		if (multiColorAnimator != null) multiColorAnimator.cancel();
		
		multiColorIndex = 0;
		autoCycleEnabled = !stopAfterFullCycle;
		holdDuration = holdMs;
		transitionDuration = transitionMs;
		
		scheduleNextColor(attrList, stopAfterFullCycle);
	}
	
	private void scheduleNextColor(List<Integer> attrList, boolean stopAfterFullCycle) {
		int fromAttr = attrList.get(multiColorIndex);
		int toAttr = attrList.get((multiColorIndex + 1) % attrList.size());
		
		int fromColor = resolveAttrColor(getContext(), fromAttr);
		int toColor = resolveAttrColor(getContext(), toAttr);
		
		fillPaint.setColor(fromColor);
		invalidate();
		
		postDelayed(() -> {
			multiColorAnimator = ValueAnimator.ofObject(new ArgbEvaluator(), fromColor, toColor);
			multiColorAnimator.setDuration(transitionDuration);
			multiColorAnimator.addUpdateListener(anim -> {
				fillPaint.setColor((int) anim.getAnimatedValue());
				invalidate();
			});
			multiColorAnimator.addListener(new AnimatorListenerAdapter() {
				@Override
				public void onAnimationEnd(android.animation.Animator animation) {
					multiColorIndex++;
					
					if (stopAfterFullCycle) {
						if (multiColorIndex < attrList.size() - 1) {
							scheduleNextColor(attrList, true);
						}
					} else {
						multiColorIndex = multiColorIndex % attrList.size();
						scheduleNextColor(attrList, false);
					}
				}
			});
			multiColorAnimator.start();
		}, holdDuration);
	}
	
	public void animateFillColorAttr(int fromAttr, int toAttr, long duration) {
		int fromColor = resolveAttrColor(getContext(), fromAttr);
		int toColor = resolveAttrColor(getContext(), toAttr);
		animateFillColor(fromColor, toColor, duration);
	}
	
	private static int resolveAttrColor(Context context, int attrRes) {
		TypedValue tv = new TypedValue();
		boolean ok = context.getTheme().resolveAttribute(attrRes, tv, true);
		return ok ? tv.data : 0xFFFFFFFF;
	}
	
	private static class EaseInOut implements TimeInterpolator{
		@Override public float getInterpolation(float t){
			return t<0.5f? 4f*t*t*t : 1f-(float)Math.pow(-2f*t+2f,3f)/2f;
		}
	}
}